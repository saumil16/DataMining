# -*- coding: utf-8 -*-
"""DataMining_Lab11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vhv46LzargOcoHZB3PuiAxIChlNpJEqw
"""

import pandas as pd

df = pd.read_csv('/content/data.csv')
df

# df.dropna(inplace=True)
df.fillna(df.mean(),inplace=True)
df.drop('id', axis=1, inplace=True)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_df = scaler.fit_transform(df)
df_scaled = pd.DataFrame(scaled_df, columns=df.columns)

df_scaled.head()

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA

# Initialize the KMeans model with the desired number of clusters
kmeans = KMeans(n_clusters=3)
kmeans_cluster = kmeans.fit_predict(df_scaled)
df_scaled['Cluster'] = kmeans_cluster

pca = PCA(n_components=2)
df_pca = pca.fit_transform(df_scaled)

plt.figure(figsize=(8, 6))
plt.scatter(df_pca[:, 0], df_pca[:, 1], c=kmeans_cluster, cmap='viridis', s=20)
plt.title('KMeans Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.colorbar(label='Cluster')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN

eps = 5
min_samples = 5
dbscan = DBSCAN(eps=eps,min_samples = min_samples)
dbscan.fit(df_scaled)
dbscan_labels = dbscan.labels_

n_clusters = len(set(dbscan_labels)) - (1 if -1 in dbscan_labels else 0)
print(f"Number of clusters : {n_clusters}")
n_noise = list(dbscan_labels).count(-1)
print(f"Number of Noise Points : {n_noise}")
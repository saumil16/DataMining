# -*- coding: utf-8 -*-
"""DataMining_Lab10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LkL8-wNUltQAeLrnNvERBwZHlc4H9t4l
"""

#Classification using a Na√Øve Bayes Classifier

import numpy as nm
import matplotlib.pyplot as mtp
import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/diabetes.csv')
df

df['SkinThickness'].replace(0,df['SkinThickness'].mean(), inplace=True)
df['Insulin'].replace(0,df['Insulin'].mean(), inplace=True)
df['BMI'].replace(0,df['BMI'].mean(), inplace=True)
df['BloodPressure'].replace(0,df['BloodPressure'].mean(), inplace=True)
df['Glucose'].replace(0,df['Glucose'].mean(), inplace=True)

df.head()

x = df.drop(["Outcome"],axis=1)
y = df.Outcome
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.15, random_state = 23)

classifier = GaussianNB()
classifier.fit(x_train, y_train)
ypredict=classifier.predict(x_test)

print("THE PREDICTED SCORE FOR DIABETES IN FEMALE PATIENT USING NAIVE BAYES MODEL IS  :{}%".format(accuracy_score(ypredict,y_test)*100))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, ypredict)
sns.heatmap(cm, annot=True)

from sklearn.metrics import (
    accuracy_score,
    confusion_matrix,
    ConfusionMatrixDisplay,
    f1_score,
)

accuray = accuracy_score(ypredict, y_test)
f1 = f1_score(ypredict, y_test, average="weighted")

print("Accuracy:", accuray*100)
print("F1 Score:", f1)

#Regression using a Regression Tree

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('/content/Walmart_sales.csv')
df.head()

df.drop("Date",axis=1,inplace=True)
df.drop("Holiday_Flag",axis=1,inplace=True)
df

df['Weekly_Sales'].replace(0,np.nan, inplace=True)
df['Fuel_Price'].replace(0,np.nan, inplace=True)
df['CPI'].replace(0,np.nan, inplace=True)
df['Unemployment'].replace(0,np.nan, inplace=True)

df = df.fillna(df.mean())

df.head()

x, y = df.drop("CPI", axis = 1), df.CPI

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

regressor = DecisionTreeRegressor(random_state = 0, max_depth = 4)
regressor.fit(x_train, y_train)
y_pred = regressor.predict(x_test)
y_pred

plt.figure(figsize=(10,8), dpi=500)
plot_tree(regressor , feature_names=x.columns);